
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESrightEQVIrightIMPLleftANDORleftNOTID NUMBER AND OR NOT EQVI IMPL PTRUE PFALSE LPAREN RPAREN LEQ GEQ LT GT EQ ASSIGN PLUS MINUS TIMES COLON SEMICOLON COMMA LBRACK RBRACK LBRACE RBRACE TYPE TRANSITION SOURCE TARGET SOURCEFORMULAspec : statement\n            | statement specstatement : TYPE ID EQ setexpr SEMICOLONstatement : SOURCE initlist SEMICOLONstatement : SOURCEFORMULA boolexpr SEMICOLONstatement : TARGET boolexpr SEMICOLONsetexpr : LBRACK NUMBER COMMA NUMBER RBRACKsetexpr : LBRACE stringlist RBRACEsetexpr : IDstringlist : enumenum : ID\n            | NUMBERstringlist : enum COMMA stringlistboolexpr : boolexpr AND boolexpr\n                | boolexpr OR boolexpr\n                | boolexpr IMPL boolexpr\n                | boolexpr EQVI boolexprboolexpr : NOT boolexprboolexpr : PTRUEboolexpr : PFALSEboolexpr : atomboolexpr : LPAREN boolexpr RPARENboolexpr : LBRACK numexpr GT numexpr RBRACKboolexpr : LBRACK numexpr LT numexpr RBRACKboolexpr : LBRACK numexpr GEQ numexpr RBRACKboolexpr : LBRACK numexpr LEQ numexpr RBRACKboolexpr : LBRACK numexpr EQ numexpr RBRACKnumexpr : LPAREN numexpr RPARENnumexpr : NUMBERnumexpr : atomnumexpr : numexpr PLUS numexpr\n               | numexpr MINUS numexpr\n               | numexpr TIMES numexprtnumexpr : LPAREN numexpr RPARENtnumexpr : NUMBERtnumexpr : IDtnumexpr : tnumexpr PLUS tnumexpr\n                | tnumexpr MINUS tnumexpr\n                | tnumexpr TIMES tnumexprtermlist : term COMMA termlisttermlist : termterm : tnumexpratom : IDatom : ID LPAREN termlist RPARENinitlist : atominitlist : atom COMMA initlistinitlist : atom EQ NUMBERinitlist : atom EQ NUMBER COMMA initlisteffects : effecteffects : effect effectseffect : atom SEMICOLONeffect : NOT atom SEMICOLONeffect : atom ASSIGN numexpr SEMICOLONparamlist : paramparamlist : param COMMA paramlistparam : ID COLON setexprstatement : TRANSITION ID LPAREN paramlist RPAREN boolexpr LBRACE effects RBRACEstatement : TRANSITION ID LPAREN RPAREN boolexpr LBRACE effects RBRACE'
    
_lr_action_items = {'TYPE':([0,2,23,27,38,70,123,128,],[3,3,-4,-5,-6,-3,-58,-57,]),'SOURCE':([0,2,23,27,38,70,123,128,],[4,4,-4,-5,-6,-3,-58,-57,]),'SOURCEFORMULA':([0,2,23,27,38,70,123,128,],[5,5,-4,-5,-6,-3,-58,-57,]),'TARGET':([0,2,23,27,38,70,123,128,],[6,6,-4,-5,-6,-3,-58,-57,]),'TRANSITION':([0,2,23,27,38,70,123,128,],[7,7,-4,-5,-6,-3,-58,-57,]),'$end':([1,2,8,23,27,38,70,123,128,],[0,-1,-2,-4,-5,-6,-3,-58,-57,]),'ID':([3,4,5,6,7,14,18,19,22,24,26,28,29,30,31,35,39,43,47,57,58,59,60,61,62,63,64,68,76,79,80,81,82,92,93,95,98,112,116,118,120,125,126,130,131,],[9,12,12,12,21,12,12,12,40,12,46,12,12,12,12,12,66,74,12,12,12,12,12,12,12,12,12,12,12,46,46,46,46,40,12,66,74,12,12,12,12,-51,12,-52,-53,]),'NOT':([5,6,14,18,28,29,30,31,68,93,112,116,118,125,130,131,],[14,14,14,14,14,14,14,14,14,14,120,120,120,-51,-52,-53,]),'PTRUE':([5,6,14,18,28,29,30,31,68,93,],[15,15,15,15,15,15,15,15,15,15,]),'PFALSE':([5,6,14,18,28,29,30,31,68,93,],[16,16,16,16,16,16,16,16,16,16,]),'LPAREN':([5,6,12,14,18,19,21,26,28,29,30,31,35,47,57,58,59,60,61,62,63,64,68,79,80,81,82,93,126,],[18,18,26,18,18,35,39,47,18,18,18,18,35,35,35,35,35,35,35,35,35,35,18,47,47,47,47,18,35,]),'LBRACK':([5,6,14,18,22,28,29,30,31,68,92,93,],[19,19,19,19,42,19,19,19,19,19,42,19,]),'EQ':([9,11,12,34,36,37,78,88,89,90,91,],[22,25,-43,61,-29,-30,-44,-31,-32,-33,-28,]),'SEMICOLON':([10,11,12,13,15,16,17,20,32,36,37,40,41,44,45,52,53,54,55,56,78,88,89,90,91,97,99,105,106,107,108,109,119,121,127,129,],[23,-45,-43,27,-19,-20,-21,38,-18,-29,-30,-9,70,-46,-47,-14,-15,-16,-17,-22,-44,-31,-32,-33,-28,-8,-48,-23,-24,-25,-26,-27,125,-7,130,131,]),'COMMA':([11,12,40,45,46,49,50,51,69,71,73,74,75,78,97,100,102,103,104,110,121,],[24,-43,-9,76,-36,79,-42,-35,95,96,98,-11,-12,-44,-8,-34,-37,-38,-39,-56,-7,]),'AND':([12,13,15,16,17,20,32,33,52,53,54,55,56,78,94,105,106,107,108,109,111,],[-43,28,-19,-20,-21,28,-18,28,-14,-15,28,28,-22,-44,28,-23,-24,-25,-26,-27,28,]),'OR':([12,13,15,16,17,20,32,33,52,53,54,55,56,78,94,105,106,107,108,109,111,],[-43,29,-19,-20,-21,29,-18,29,-14,-15,29,29,-22,-44,29,-23,-24,-25,-26,-27,29,]),'IMPL':([12,13,15,16,17,20,32,33,52,53,54,55,56,78,94,105,106,107,108,109,111,],[-43,30,-19,-20,-21,30,-18,30,-14,-15,30,30,-22,-44,30,-23,-24,-25,-26,-27,30,]),'EQVI':([12,13,15,16,17,20,32,33,52,53,54,55,56,78,94,105,106,107,108,109,111,],[-43,31,-19,-20,-21,31,-18,31,-14,-15,-16,31,-22,-44,31,-23,-24,-25,-26,-27,31,]),'RPAREN':([12,15,16,17,32,33,36,37,39,40,46,48,49,50,51,52,53,54,55,56,65,67,69,77,78,88,89,90,91,97,100,101,102,103,104,105,106,107,108,109,110,113,121,],[-43,-19,-20,-21,-18,56,-29,-30,68,-9,-36,78,-41,-42,-35,-14,-15,-16,-17,-22,91,93,-54,100,-44,-31,-32,-33,-28,-8,-34,-40,-37,-38,-39,-23,-24,-25,-26,-27,-56,-55,-7,]),'LBRACE':([12,15,16,17,22,32,52,53,54,55,56,78,92,94,105,106,107,108,109,111,],[-43,-19,-20,-21,43,-18,-14,-15,-16,-17,-22,-44,43,112,-23,-24,-25,-26,-27,116,]),'GT':([12,34,36,37,78,88,89,90,91,],[-43,57,-29,-30,-44,-31,-32,-33,-28,]),'LT':([12,34,36,37,78,88,89,90,91,],[-43,58,-29,-30,-44,-31,-32,-33,-28,]),'GEQ':([12,34,36,37,78,88,89,90,91,],[-43,59,-29,-30,-44,-31,-32,-33,-28,]),'LEQ':([12,34,36,37,78,88,89,90,91,],[-43,60,-29,-30,-44,-31,-32,-33,-28,]),'PLUS':([12,34,36,37,46,50,51,65,77,78,83,84,85,86,87,88,89,90,91,100,102,103,104,129,],[-43,62,-29,-30,-36,80,-35,62,62,-44,62,62,62,62,62,-31,-32,-33,-28,-34,-37,-38,-39,62,]),'MINUS':([12,34,36,37,46,50,51,65,77,78,83,84,85,86,87,88,89,90,91,100,102,103,104,129,],[-43,63,-29,-30,-36,81,-35,63,63,-44,63,63,63,63,63,-31,-32,-33,-28,-34,-37,-38,-39,63,]),'TIMES':([12,34,36,37,46,50,51,65,77,78,83,84,85,86,87,88,89,90,91,100,102,103,104,129,],[-43,64,-29,-30,-36,82,-35,64,64,-44,64,64,64,64,64,64,64,-33,-28,-34,82,82,-39,64,]),'RBRACK':([12,36,37,78,83,84,85,86,87,88,89,90,91,114,],[-43,-29,-30,-44,105,106,107,108,109,-31,-32,-33,-28,121,]),'ASSIGN':([12,78,119,],[-43,-44,126,]),'NUMBER':([19,25,26,35,42,43,47,57,58,59,60,61,62,63,64,79,80,81,82,96,98,126,],[36,45,51,36,71,75,36,36,36,36,36,36,36,36,36,51,51,51,51,114,75,36,]),'COLON':([66,],[92,]),'RBRACE':([72,73,74,75,115,117,118,122,124,125,130,131,],[97,-10,-11,-12,-13,123,-49,128,-50,-51,-52,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'spec':([0,2,],[1,8,]),'statement':([0,2,],[2,2,]),'initlist':([4,24,76,],[10,44,99,]),'atom':([4,5,6,14,18,19,24,28,29,30,31,35,47,57,58,59,60,61,62,63,64,68,76,93,112,116,118,120,126,],[11,17,17,17,17,37,11,17,17,17,17,37,37,37,37,37,37,37,37,37,37,17,11,17,119,119,119,127,37,]),'boolexpr':([5,6,14,18,28,29,30,31,68,93,],[13,20,32,33,52,53,54,55,94,111,]),'numexpr':([19,35,47,57,58,59,60,61,62,63,64,126,],[34,65,77,83,84,85,86,87,88,89,90,129,]),'setexpr':([22,92,],[41,110,]),'termlist':([26,79,],[48,101,]),'term':([26,79,],[49,49,]),'tnumexpr':([26,79,80,81,82,],[50,50,102,103,104,]),'paramlist':([39,95,],[67,113,]),'param':([39,95,],[69,69,]),'stringlist':([43,98,],[72,115,]),'enum':([43,98,],[73,73,]),'effects':([112,116,118,],[117,122,124,]),'effect':([112,116,118,],[118,118,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> spec","S'",1,None,None,None),
  ('spec -> statement','spec',1,'p_spec','specparser.py',158),
  ('spec -> statement spec','spec',2,'p_spec','specparser.py',159),
  ('statement -> TYPE ID EQ setexpr SEMICOLON','statement',5,'p_type_definition','specparser.py',165),
  ('statement -> SOURCE initlist SEMICOLON','statement',3,'p_sourceN','specparser.py',171),
  ('statement -> SOURCEFORMULA boolexpr SEMICOLON','statement',3,'p_sourceFormula','specparser.py',178),
  ('statement -> TARGET boolexpr SEMICOLON','statement',3,'p_target','specparser.py',185),
  ('setexpr -> LBRACK NUMBER COMMA NUMBER RBRACK','setexpr',5,'p_setexpr_interval','specparser.py',194),
  ('setexpr -> LBRACE stringlist RBRACE','setexpr',3,'p_setexpr_enumed','specparser.py',200),
  ('setexpr -> ID','setexpr',1,'p_setexpr_named','specparser.py',206),
  ('stringlist -> enum','stringlist',1,'p_stringlist1','specparser.py',212),
  ('enum -> ID','enum',1,'p_enum','specparser.py',216),
  ('enum -> NUMBER','enum',1,'p_enum','specparser.py',217),
  ('stringlist -> enum COMMA stringlist','stringlist',3,'p_stringlistN','specparser.py',221),
  ('boolexpr -> boolexpr AND boolexpr','boolexpr',3,'p_boolexpr_binop','specparser.py',229),
  ('boolexpr -> boolexpr OR boolexpr','boolexpr',3,'p_boolexpr_binop','specparser.py',230),
  ('boolexpr -> boolexpr IMPL boolexpr','boolexpr',3,'p_boolexpr_binop','specparser.py',231),
  ('boolexpr -> boolexpr EQVI boolexpr','boolexpr',3,'p_boolexpr_binop','specparser.py',232),
  ('boolexpr -> NOT boolexpr','boolexpr',2,'p_boolexpr_unop','specparser.py',241),
  ('boolexpr -> PTRUE','boolexpr',1,'p_boolexpr_true','specparser.py',247),
  ('boolexpr -> PFALSE','boolexpr',1,'p_boolexpr_false','specparser.py',251),
  ('boolexpr -> atom','boolexpr',1,'p_boolexpr_atom','specparser.py',257),
  ('boolexpr -> LPAREN boolexpr RPAREN','boolexpr',3,'p_boolexpr_parentheses','specparser.py',263),
  ('boolexpr -> LBRACK numexpr GT numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_GT','specparser.py',273),
  ('boolexpr -> LBRACK numexpr LT numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_LT','specparser.py',277),
  ('boolexpr -> LBRACK numexpr GEQ numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_GEQ','specparser.py',281),
  ('boolexpr -> LBRACK numexpr LEQ numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_LEQ','specparser.py',285),
  ('boolexpr -> LBRACK numexpr EQ numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_EQ','specparser.py',289),
  ('numexpr -> LPAREN numexpr RPAREN','numexpr',3,'p_numexpr_parentheses','specparser.py',295),
  ('numexpr -> NUMBER','numexpr',1,'p_numexpr1','specparser.py',299),
  ('numexpr -> atom','numexpr',1,'p_numexpr3','specparser.py',303),
  ('numexpr -> numexpr PLUS numexpr','numexpr',3,'p_numexpr','specparser.py',309),
  ('numexpr -> numexpr MINUS numexpr','numexpr',3,'p_numexpr','specparser.py',310),
  ('numexpr -> numexpr TIMES numexpr','numexpr',3,'p_numexpr','specparser.py',311),
  ('tnumexpr -> LPAREN numexpr RPAREN','tnumexpr',3,'p_tnumexpr_parentheses','specparser.py',319),
  ('tnumexpr -> NUMBER','tnumexpr',1,'p_tnumexpr1','specparser.py',323),
  ('tnumexpr -> ID','tnumexpr',1,'p_tnumexpr2','specparser.py',329),
  ('tnumexpr -> tnumexpr PLUS tnumexpr','tnumexpr',3,'p_tnumexpr','specparser.py',333),
  ('tnumexpr -> tnumexpr MINUS tnumexpr','tnumexpr',3,'p_tnumexpr','specparser.py',334),
  ('tnumexpr -> tnumexpr TIMES tnumexpr','tnumexpr',3,'p_tnumexpr','specparser.py',335),
  ('termlist -> term COMMA termlist','termlist',3,'p_termlistN','specparser.py',343),
  ('termlist -> term','termlist',1,'p_termlist1','specparser.py',347),
  ('term -> tnumexpr','term',1,'p_term_numeric','specparser.py',353),
  ('atom -> ID','atom',1,'p_atom0','specparser.py',360),
  ('atom -> ID LPAREN termlist RPAREN','atom',4,'p_atom','specparser.py',364),
  ('initlist -> atom','initlist',1,'p_initlist1','specparser.py',368),
  ('initlist -> atom COMMA initlist','initlist',3,'p_initlistN','specparser.py',372),
  ('initlist -> atom EQ NUMBER','initlist',3,'p_initlistnum1','specparser.py',376),
  ('initlist -> atom EQ NUMBER COMMA initlist','initlist',5,'p_initlistnumN','specparser.py',380),
  ('effects -> effect','effects',1,'p_effect1','specparser.py',388),
  ('effects -> effect effects','effects',2,'p_effects','specparser.py',392),
  ('effect -> atom SEMICOLON','effect',2,'p_effectP','specparser.py',400),
  ('effect -> NOT atom SEMICOLON','effect',3,'p_effectN','specparser.py',404),
  ('effect -> atom ASSIGN numexpr SEMICOLON','effect',4,'p_effectA','specparser.py',410),
  ('paramlist -> param','paramlist',1,'p_paramlist1','specparser.py',416),
  ('paramlist -> param COMMA paramlist','paramlist',3,'p_paramlistN','specparser.py',420),
  ('param -> ID COLON setexpr','param',3,'p_param','specparser.py',424),
  ('statement -> TRANSITION ID LPAREN paramlist RPAREN boolexpr LBRACE effects RBRACE','statement',9,'p_transition','specparser.py',430),
  ('statement -> TRANSITION ID LPAREN RPAREN boolexpr LBRACE effects RBRACE','statement',8,'p_transition0','specparser.py',434),
]
