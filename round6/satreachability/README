
This program reads a file that contains a model
of a transition system, parses the file,
grounds the specification, and finally translates
it into a formula in the propositional logic.
The grounded specification as well as the formula
are printed to the standard output.

INSTALLATION AND USE

To run the program you need

  Python 3.x
  PLY, which is a parser/lexer tool for Python
  PySMT

To install these in some Linux variants (e.g. Ubuntu), write

  sudo apt-get install python3 python3-ply
  pip3 install pysmt
  pysmt-install --msat

  You may have to install libgmp before MathSAT:

  sudo apt-get install libgmp-dev

To run the SMT-based reachability analyzer write e.g.

  python3 satreachability.py SETBITS.SPEC


For the documentation of the component libraries, see
   https://www.dabeaz.com/ply/
   https://github.com/pysmt/pysmt
   https://github.com/tulip-control/dd

THE SPECIFICATION LANGUAGE

Numeric constants can be specified, e.g.

  xMax = 10;
  lastDay = 7;

Naming sets of strings or numbers or intervals of numbers is possible
with 'type'. For example,

  type weekdaysn=[1,lastDay];
  type weekdays = { Mon, Tue, Wed, Thu, Fri, Sat, Sun };

Transition rules are parametric, and multiple "ground" transition
rules can be compactly described by parameterizing with one or
more parameters. The parameters can appear as part of the _names_
of both Boolean and numeric state variables. After the name and
parameters, one has to declare the _condition_ of the transition
and the _effects_ of the transition. For example,

  transition gofurther(x : [1,10])
  location(x)
  {
    not location(x);
    location(x+1);
    cost := cost + 10;
  }

A transition's parameters (like 'x' above) can currently only occur
in one of the _terms_ of a structured variable name, like in
location(x) or location(x+1) above. Current code would not allow
    cost := cost + x;
as an effect, or formulas with [A = x+1] with 'x' occurring
in an expression that is not a state variable name, although
both of these extensions would be easy to implement.


There are forms of quantification, which the reachability analyzer
reduces to conventional propositional formulas.

  forall (x : [1,10]) location(x,5)
  exists (x : [1,10]) location(x,5)
  atleast 5 (x : [1,10]) occupied(x,5)
  atmost 5 (x : [1,10]) occupied(x,5)
  exactly 5 (x : [1,10]) occupied(x,5)
  between 3 7 (x : [1,10]) occupied(x,5)

The first two, 'forall' and 'exists' are respectively reduced to
conjunctions and disjunctions.
The rest require more complex cardinality constraints.
The cardinality constraints can also be used by listing
the formulas, for example as in

  atmost 2 (occupied(1,2),occupied(1,3),occupied(2,2),occupied(2,3))
  atleast 2 (occupied(1,2),occupied(1,3),occupied(2,2),occupied(2,3))
  exactly 2 (occupied(1,2),occupied(1,3),occupied(2,2),occupied(2,3))
  between 2 3 (occupied(1,2),occupied(1,3),occupied(2,2),occupied(2,3))

The transition rules describe how the state of the system changes.
Additionally, we have to specify what kind of transition sequences
we are looking for. In the most basic case we have a single initial
state and one or more goal state.

If there is only one initial/source state, it can be expressed
by using the 'source' declaration, which lists the values of
the True Boolean variables and the non-zero numeric variables, e.g.

  source A, B = 7, D = 1;

Here A is a Boolean state variable that is initially True, and
B and D are numeric state variables with the respective initial
values.

If there are multiple initial/source states, then that set has
to be specified as a formula. The keyword in this case is
'sourceformula', and an example of this is as follows.

  sourceformula A and [B=7] and [D=1] and (not C or [E=10]);

Notice that in formulas the numeric inequalities have to be
surrounded by the square brackets [ ].

Target states are declared with 'target' just like 'sourceformula'. E.g.

  target A and [B=8] and [D=2] and (not C or [E=11]);

Instead of source and target states, we can specify 'trajectory'
constraints with the same keyword, indicating the values of state
variables are different time points. The constraint takes
a propositional formula similarly to 'target' and 'sourceformula',
but each of the state variable names is followed by the '@' symbol
and a number, indicating the time point where the state variable's
value is referred to. An example of 'trajectory' constraint is

  trajectory (A@0 eqvi not A@5) and (B@0 eqvi not B@5)

which requires that the state variables A and B do not have the
same values at time points 0 and 5.
Because the trajectory constraints refer to specific constant
time points (like 0 and 5 in the example above), it does not
make sense to look at reachability for shorter horizon lengths.
Hence the reachability analyzer determines the highest time
point referred to (like 5 in the example above), and only
look at reachability over the horizon 0,1,2,3,4,5.

If the 'trajectory' constraint is used, 'source' and 'target'
constraints are not needed (and will be ignored).
