
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESleftFORALLEXISTSATMOSTATLEASTEXACTLYBETWEENrightEQVIrightIMPLleftANDORleftNOTID NUMBER AND OR NOT EQVI IMPL PTRUE PFALSE LPAREN RPAREN LEQ GEQ LT GT EQ ASSIGN PLUS MINUS TIMES COLON SEMICOLON COMMA LBRACK RBRACK LBRACE RBRACE TYPE TRANSITION SOURCE TARGET SOURCEFORMULA TRAJECTORYFORMULA EXISTS FORALL IF ATMOST ATLEAST EXACTLY BETWEEN ATspec : statement\n            | statement specstatement : ID EQ NUMBER SEMICOLONstatement : TYPE ID EQ setexpr SEMICOLONstatement : SOURCE initlist SEMICOLONstatement : SOURCEFORMULA boolexpr SEMICOLONstatement : TARGET boolexpr SEMICOLONstatement : TRAJECTORYFORMULA boolexpr SEMICOLONsetexpr : LBRACK tnumexpr COMMA tnumexpr RBRACKsetexpr : LBRACE stringlist RBRACEsetexpr : IDstringlist : enumenum : ID\n            | NUMBERstringlist : enum COMMA stringlistboolexpr : boolexpr AND boolexpr\n                | boolexpr OR boolexpr\n                | boolexpr IMPL boolexpr\n                | boolexpr EQVI boolexprboolexpr : NOT boolexprboolexpr : PTRUEboolexpr : PFALSEboolexpr : EXISTS LPAREN paramlist RPAREN boolexpr %prec EXISTSboolexpr : FORALL LPAREN paramlist RPAREN boolexpr %prec FORALLboolexpr : ATMOST NUMBER LPAREN boolexprlist RPARENboolexpr : ATLEAST NUMBER LPAREN boolexprlist RPARENboolexpr : EXACTLY NUMBER LPAREN boolexprlist RPARENboolexpr : BETWEEN NUMBER NUMBER LPAREN boolexprlist RPARENboolexpr : ATMOST NUMBER LPAREN paramlist RPAREN boolexpr %prec ATMOSTboolexpr : ATLEAST NUMBER LPAREN paramlist RPAREN boolexpr %prec ATLEASTboolexpr : EXACTLY NUMBER LPAREN paramlist RPAREN boolexpr %prec EXACTLYboolexpr : BETWEEN NUMBER NUMBER LPAREN paramlist RPAREN boolexpr %prec BETWEENboolexprlist : boolexprboolexprlist : boolexpr COMMA boolexprlistboolexpr : atomboolexpr : atom AT NUMBERboolexpr : LPAREN boolexpr RPARENboolexpr : LBRACK numexpr GT numexpr RBRACKboolexpr : LBRACK numexpr LT numexpr RBRACKboolexpr : LBRACK numexpr GEQ numexpr RBRACKboolexpr : LBRACK numexpr LEQ numexpr RBRACKboolexpr : LBRACK numexpr EQ numexpr RBRACKnumexpr : LPAREN numexpr RPARENnumexpr : NUMBERnumexpr : atomnumexpr : numexpr PLUS numexpr\n               | numexpr MINUS numexpr\n               | numexpr TIMES numexprtnumexpr : LPAREN numexpr RPARENtnumexpr : NUMBERtnumexpr : IDtnumexpr : tnumexpr PLUS tnumexpr\n                | tnumexpr MINUS tnumexpr\n                | tnumexpr TIMES tnumexprtermlist : term COMMA termlisttermlist : termterm : tnumexpratom : IDatom : ID LPAREN termlist RPARENinitlist : atominitlist : atom COMMA initlistinitlist : atom EQ NUMBERinitlist : atom EQ NUMBER COMMA initlisteffects : effecteffects : effect effectseffect : atom SEMICOLONeffect : NOT atom SEMICOLONeffect : atom ASSIGN numexpr SEMICOLONeffect : IF boolexpr LBRACE effects RBRACEeffect : FORALL LPAREN paramlist RPAREN LBRACE effects RBRACEparamlist : paramparamlist : param COMMA paramlistparam : ID COLON setexprstatement : TRANSITION ID LPAREN paramlist RPAREN boolexpr LBRACE effects RBRACEstatement : TRANSITION ID LPAREN RPAREN boolexpr LBRACE effects RBRACE'
    
_lr_action_items = {'ID':([0,2,4,5,6,7,8,9,17,21,28,33,34,35,37,38,39,40,41,42,44,46,53,56,57,58,59,62,63,67,81,82,83,86,87,88,89,90,91,92,93,96,97,103,106,107,108,109,110,111,112,113,122,132,134,136,148,149,151,153,162,170,171,173,175,176,181,183,184,187,188,190,191,193,196,197,199,],[3,3,12,15,15,15,15,31,15,15,15,60,-5,15,66,-6,15,15,15,15,78,78,15,-7,-8,78,-3,66,101,15,117,117,117,15,15,15,15,15,15,15,15,15,-4,15,66,66,66,66,15,78,60,15,117,15,66,101,15,15,15,15,15,15,15,15,15,15,-75,-66,15,78,-74,-67,15,-68,-69,15,-70,]),'TYPE':([0,2,34,38,56,57,59,97,181,188,],[4,4,-5,-6,-7,-8,-3,-4,-75,-74,]),'SOURCE':([0,2,34,38,56,57,59,97,181,188,],[5,5,-5,-6,-7,-8,-3,-4,-75,-74,]),'SOURCEFORMULA':([0,2,34,38,56,57,59,97,181,188,],[6,6,-5,-6,-7,-8,-3,-4,-75,-74,]),'TARGET':([0,2,34,38,56,57,59,97,181,188,],[7,7,-5,-6,-7,-8,-3,-4,-75,-74,]),'TRAJECTORYFORMULA':([0,2,34,38,56,57,59,97,181,188,],[8,8,-5,-6,-7,-8,-3,-4,-75,-74,]),'TRANSITION':([0,2,34,38,56,57,59,97,181,188,],[9,9,-5,-6,-7,-8,-3,-4,-75,-74,]),'$end':([1,2,10,34,38,56,57,59,97,181,188,],[0,-1,-2,-5,-6,-7,-8,-3,-4,-75,-74,]),'EQ':([3,12,14,15,52,54,55,105,128,129,130,131,],[11,33,36,-58,90,-44,-45,-59,-46,-47,-48,-43,]),'NOT':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,162,170,171,173,176,183,190,191,193,196,197,199,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,175,17,175,175,17,-66,-67,175,-68,-69,175,-70,]),'PTRUE':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'PFALSE':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXISTS':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FORALL':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,162,170,171,173,176,183,190,191,193,196,197,199,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,177,22,177,177,22,-66,-67,177,-68,-69,177,-70,]),'ATMOST':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'ATLEAST':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'EXACTLY':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'BETWEEN':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'LPAREN':([6,7,8,15,17,20,21,22,28,31,37,39,40,41,42,47,48,49,53,62,67,81,82,83,84,86,87,88,89,90,91,92,93,96,106,107,108,109,110,113,117,122,132,134,148,149,151,153,170,176,177,184,],[21,21,21,37,21,44,21,46,53,58,67,21,21,21,21,81,82,83,53,67,53,21,21,21,122,53,53,53,53,53,53,53,53,21,67,67,67,67,21,21,37,21,21,67,21,21,21,21,21,21,187,53,]),'LBRACK':([6,7,8,17,21,33,39,40,41,42,81,82,83,96,110,112,113,122,132,148,149,151,153,170,176,],[28,28,28,28,28,62,28,28,28,28,28,28,28,28,28,62,28,28,28,28,28,28,28,28,28,]),'NUMBER':([11,23,24,25,26,28,36,37,50,51,53,62,63,67,86,87,88,89,90,91,92,93,106,107,108,109,134,136,184,],[32,47,48,49,50,54,65,71,84,85,54,71,102,54,54,54,54,54,54,54,54,54,71,71,71,71,71,102,54,]),'SEMICOLON':([13,14,15,16,18,19,27,29,30,32,43,54,55,60,61,64,65,72,73,74,75,79,85,105,128,129,130,131,135,137,143,146,147,150,152,156,157,158,159,160,165,167,168,169,174,178,179,185,189,],[34,-60,-58,38,-21,-22,-35,56,57,59,-20,-44,-45,-11,97,-61,-62,-16,-17,-18,-19,-37,-36,-59,-46,-47,-48,-43,-10,-63,-23,-24,-25,-26,-27,-38,-39,-40,-41,-42,-29,-30,-31,-28,183,-9,-32,190,193,]),'COMMA':([14,15,18,19,27,43,60,65,66,69,70,71,72,73,74,75,77,79,85,98,100,101,102,105,116,117,135,138,140,141,142,143,145,146,147,150,152,156,157,158,159,160,165,167,168,169,178,179,],[35,-58,-21,-22,-35,-20,-11,103,-51,106,-57,-50,-16,-17,-18,-19,111,-37,-36,134,136,-13,-14,-59,149,-58,-10,-49,-52,-53,-54,-23,-73,-24,-25,-26,-27,-38,-39,-40,-41,-42,-29,-30,-31,-28,-9,-32,]),'AT':([15,27,105,117,],[-58,51,-59,-58,]),'AND':([15,16,18,19,27,29,30,43,45,72,73,74,75,79,85,105,116,117,133,143,146,147,150,152,156,157,158,159,160,161,165,167,168,169,179,186,],[-58,39,-21,-22,-35,39,39,-20,39,-16,-17,39,39,-37,-36,-59,39,-58,39,39,39,-25,-26,-27,-38,-39,-40,-41,-42,39,39,39,39,-28,39,39,]),'OR':([15,16,18,19,27,29,30,43,45,72,73,74,75,79,85,105,116,117,133,143,146,147,150,152,156,157,158,159,160,161,165,167,168,169,179,186,],[-58,40,-21,-22,-35,40,40,-20,40,-16,-17,40,40,-37,-36,-59,40,-58,40,40,40,-25,-26,-27,-38,-39,-40,-41,-42,40,40,40,40,-28,40,40,]),'IMPL':([15,16,18,19,27,29,30,43,45,72,73,74,75,79,85,105,116,117,133,143,146,147,150,152,156,157,158,159,160,161,165,167,168,169,179,186,],[-58,41,-21,-22,-35,41,41,-20,41,-16,-17,41,41,-37,-36,-59,41,-58,41,41,41,-25,-26,-27,-38,-39,-40,-41,-42,41,41,41,41,-28,41,41,]),'EQVI':([15,16,18,19,27,29,30,43,45,72,73,74,75,79,85,105,116,117,133,143,146,147,150,152,156,157,158,159,160,161,165,167,168,169,179,186,],[-58,42,-21,-22,-35,42,42,-20,42,-16,-17,-18,42,-37,-36,-59,42,-58,42,42,42,-25,-26,-27,-38,-39,-40,-41,-42,42,42,42,42,-28,42,42,]),'RPAREN':([15,18,19,27,43,45,54,55,58,60,66,68,69,70,71,72,73,74,75,76,77,79,80,85,94,95,104,105,114,115,116,117,118,119,120,121,128,129,130,131,135,138,139,140,141,142,143,144,145,146,147,150,152,154,155,156,157,158,159,160,165,166,167,168,169,178,179,192,],[-58,-21,-22,-35,-20,79,-44,-45,96,-11,-51,105,-56,-57,-50,-16,-17,-18,-19,110,-71,-37,113,-36,131,132,138,-59,147,148,-33,-58,150,151,152,153,-46,-47,-48,-43,-10,-49,-55,-52,-53,-54,-23,-72,-73,-24,-25,-26,-27,169,170,-38,-39,-40,-41,-42,-29,-34,-30,-31,-28,-9,-32,195,]),'LBRACE':([15,18,19,27,33,43,72,73,74,75,79,85,105,112,133,143,146,147,150,152,156,157,158,159,160,161,165,167,168,169,179,186,195,],[-58,-21,-22,-35,63,-20,-16,-17,-18,-19,-37,-36,-59,63,162,-23,-24,-25,-26,-27,-38,-39,-40,-41,-42,171,-29,-30,-31,-28,-32,191,197,]),'GT':([15,52,54,55,105,128,129,130,131,],[-58,86,-44,-45,-59,-46,-47,-48,-43,]),'LT':([15,52,54,55,105,128,129,130,131,],[-58,87,-44,-45,-59,-46,-47,-48,-43,]),'GEQ':([15,52,54,55,105,128,129,130,131,],[-58,88,-44,-45,-59,-46,-47,-48,-43,]),'LEQ':([15,52,54,55,105,128,129,130,131,],[-58,89,-44,-45,-59,-46,-47,-48,-43,]),'PLUS':([15,52,54,55,66,70,71,94,98,104,105,123,124,125,126,127,128,129,130,131,138,140,141,142,163,189,],[-58,91,-44,-45,-51,107,-50,91,107,91,-59,91,91,91,91,91,-46,-47,-48,-43,-49,-52,-53,-54,107,91,]),'MINUS':([15,52,54,55,66,70,71,94,98,104,105,123,124,125,126,127,128,129,130,131,138,140,141,142,163,189,],[-58,92,-44,-45,-51,108,-50,92,108,92,-59,92,92,92,92,92,-46,-47,-48,-43,-49,-52,-53,-54,108,92,]),'TIMES':([15,52,54,55,66,70,71,94,98,104,105,123,124,125,126,127,128,129,130,131,138,140,141,142,163,189,],[-58,93,-44,-45,-51,109,-50,93,109,93,-59,93,93,93,93,93,93,93,-48,-43,-49,109,109,-54,109,93,]),'RBRACK':([15,54,55,66,71,105,123,124,125,126,127,128,129,130,131,138,140,141,142,163,],[-58,-44,-45,-51,-50,-59,156,157,158,159,160,-46,-47,-48,-43,-49,-52,-53,-54,178,]),'ASSIGN':([15,105,174,],[-58,-59,184,]),'COLON':([78,117,],[112,112,]),'RBRACE':([99,100,101,102,164,172,173,180,182,183,190,193,194,196,198,199,],[135,-12,-13,-14,-15,181,-64,188,-65,-66,-67,-68,196,-69,199,-70,]),'IF':([162,171,173,183,190,191,193,196,197,199,],[176,176,176,-66,-67,176,-68,-69,176,-70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'spec':([0,2,],[1,10,]),'statement':([0,2,],[2,2,]),'initlist':([5,35,103,],[13,64,137,]),'atom':([5,6,7,8,17,21,28,35,39,40,41,42,53,67,81,82,83,86,87,88,89,90,91,92,93,96,103,110,113,122,132,148,149,151,153,162,170,171,173,175,176,184,191,197,],[14,27,27,27,27,27,55,14,27,27,27,27,55,55,27,27,27,55,55,55,55,55,55,55,55,27,14,27,27,27,27,27,27,27,27,174,27,174,174,185,27,55,174,174,]),'boolexpr':([6,7,8,17,21,39,40,41,42,81,82,83,96,110,113,122,132,148,149,151,153,170,176,],[16,29,30,43,45,72,73,74,75,116,116,116,133,143,146,116,161,165,116,167,168,179,186,]),'numexpr':([28,53,67,86,87,88,89,90,91,92,93,184,],[52,94,104,123,124,125,126,127,128,129,130,189,]),'setexpr':([33,112,],[61,145,]),'termlist':([37,106,],[68,139,]),'term':([37,106,],[69,69,]),'tnumexpr':([37,62,106,107,108,109,134,],[70,98,70,140,141,142,163,]),'paramlist':([44,46,58,81,82,83,111,122,187,],[76,80,95,115,119,121,144,155,192,]),'param':([44,46,58,81,82,83,111,122,187,],[77,77,77,77,77,77,77,77,77,]),'stringlist':([63,136,],[99,164,]),'enum':([63,136,],[100,100,]),'boolexprlist':([81,82,83,122,149,],[114,118,120,154,166,]),'effects':([162,171,173,191,197,],[172,180,182,194,198,]),'effect':([162,171,173,191,197,],[173,173,173,173,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> spec","S'",1,None,None,None),
  ('spec -> statement','spec',1,'p_spec','specparser2.py',194),
  ('spec -> statement spec','spec',2,'p_spec','specparser2.py',195),
  ('statement -> ID EQ NUMBER SEMICOLON','statement',4,'p_constant_definition','specparser2.py',201),
  ('statement -> TYPE ID EQ setexpr SEMICOLON','statement',5,'p_type_definition','specparser2.py',207),
  ('statement -> SOURCE initlist SEMICOLON','statement',3,'p_sourceN','specparser2.py',213),
  ('statement -> SOURCEFORMULA boolexpr SEMICOLON','statement',3,'p_sourceFormula','specparser2.py',222),
  ('statement -> TARGET boolexpr SEMICOLON','statement',3,'p_target','specparser2.py',231),
  ('statement -> TRAJECTORYFORMULA boolexpr SEMICOLON','statement',3,'p_trajectoryFormula','specparser2.py',240),
  ('setexpr -> LBRACK tnumexpr COMMA tnumexpr RBRACK','setexpr',5,'p_setexpr_interval','specparser2.py',251),
  ('setexpr -> LBRACE stringlist RBRACE','setexpr',3,'p_setexpr_enumed','specparser2.py',260),
  ('setexpr -> ID','setexpr',1,'p_setexpr_named','specparser2.py',266),
  ('stringlist -> enum','stringlist',1,'p_stringlist1','specparser2.py',272),
  ('enum -> ID','enum',1,'p_enum','specparser2.py',276),
  ('enum -> NUMBER','enum',1,'p_enum','specparser2.py',277),
  ('stringlist -> enum COMMA stringlist','stringlist',3,'p_stringlistN','specparser2.py',281),
  ('boolexpr -> boolexpr AND boolexpr','boolexpr',3,'p_boolexpr_binop','specparser2.py',289),
  ('boolexpr -> boolexpr OR boolexpr','boolexpr',3,'p_boolexpr_binop','specparser2.py',290),
  ('boolexpr -> boolexpr IMPL boolexpr','boolexpr',3,'p_boolexpr_binop','specparser2.py',291),
  ('boolexpr -> boolexpr EQVI boolexpr','boolexpr',3,'p_boolexpr_binop','specparser2.py',292),
  ('boolexpr -> NOT boolexpr','boolexpr',2,'p_boolexpr_unop','specparser2.py',301),
  ('boolexpr -> PTRUE','boolexpr',1,'p_boolexpr_true','specparser2.py',307),
  ('boolexpr -> PFALSE','boolexpr',1,'p_boolexpr_false','specparser2.py',311),
  ('boolexpr -> EXISTS LPAREN paramlist RPAREN boolexpr','boolexpr',5,'p_boolexpr_exists','specparser2.py',317),
  ('boolexpr -> FORALL LPAREN paramlist RPAREN boolexpr','boolexpr',5,'p_boolexpr_forall','specparser2.py',321),
  ('boolexpr -> ATMOST NUMBER LPAREN boolexprlist RPAREN','boolexpr',5,'p_boolexpr_atmost','specparser2.py',327),
  ('boolexpr -> ATLEAST NUMBER LPAREN boolexprlist RPAREN','boolexpr',5,'p_boolexpr_atleast','specparser2.py',331),
  ('boolexpr -> EXACTLY NUMBER LPAREN boolexprlist RPAREN','boolexpr',5,'p_boolexpr_exactly','specparser2.py',335),
  ('boolexpr -> BETWEEN NUMBER NUMBER LPAREN boolexprlist RPAREN','boolexpr',6,'p_boolexpr_between','specparser2.py',339),
  ('boolexpr -> ATMOST NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',6,'p_boolexpr_atmost_quant','specparser2.py',345),
  ('boolexpr -> ATLEAST NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',6,'p_boolexpr_atleast_quant','specparser2.py',349),
  ('boolexpr -> EXACTLY NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',6,'p_boolexpr_exactly_quant','specparser2.py',353),
  ('boolexpr -> BETWEEN NUMBER NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',7,'p_boolexpr_between_quant','specparser2.py',357),
  ('boolexprlist -> boolexpr','boolexprlist',1,'p_boolexprlist1','specparser2.py',363),
  ('boolexprlist -> boolexpr COMMA boolexprlist','boolexprlist',3,'p_boolexprlist','specparser2.py',367),
  ('boolexpr -> atom','boolexpr',1,'p_boolexpr_atom','specparser2.py',373),
  ('boolexpr -> atom AT NUMBER','boolexpr',3,'p_boolexpr_timed_atom','specparser2.py',379),
  ('boolexpr -> LPAREN boolexpr RPAREN','boolexpr',3,'p_boolexpr_parentheses','specparser2.py',385),
  ('boolexpr -> LBRACK numexpr GT numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_GT','specparser2.py',395),
  ('boolexpr -> LBRACK numexpr LT numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_LT','specparser2.py',399),
  ('boolexpr -> LBRACK numexpr GEQ numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_GEQ','specparser2.py',403),
  ('boolexpr -> LBRACK numexpr LEQ numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_LEQ','specparser2.py',407),
  ('boolexpr -> LBRACK numexpr EQ numexpr RBRACK','boolexpr',5,'p_boolexpr_numrel_EQ','specparser2.py',411),
  ('numexpr -> LPAREN numexpr RPAREN','numexpr',3,'p_numexpr_parentheses','specparser2.py',417),
  ('numexpr -> NUMBER','numexpr',1,'p_numexpr1','specparser2.py',421),
  ('numexpr -> atom','numexpr',1,'p_numexpr3','specparser2.py',425),
  ('numexpr -> numexpr PLUS numexpr','numexpr',3,'p_numexpr','specparser2.py',431),
  ('numexpr -> numexpr MINUS numexpr','numexpr',3,'p_numexpr','specparser2.py',432),
  ('numexpr -> numexpr TIMES numexpr','numexpr',3,'p_numexpr','specparser2.py',433),
  ('tnumexpr -> LPAREN numexpr RPAREN','tnumexpr',3,'p_tnumexpr_parentheses','specparser2.py',441),
  ('tnumexpr -> NUMBER','tnumexpr',1,'p_tnumexpr1','specparser2.py',445),
  ('tnumexpr -> ID','tnumexpr',1,'p_tnumexpr2','specparser2.py',451),
  ('tnumexpr -> tnumexpr PLUS tnumexpr','tnumexpr',3,'p_tnumexpr','specparser2.py',458),
  ('tnumexpr -> tnumexpr MINUS tnumexpr','tnumexpr',3,'p_tnumexpr','specparser2.py',459),
  ('tnumexpr -> tnumexpr TIMES tnumexpr','tnumexpr',3,'p_tnumexpr','specparser2.py',460),
  ('termlist -> term COMMA termlist','termlist',3,'p_termlistN','specparser2.py',468),
  ('termlist -> term','termlist',1,'p_termlist1','specparser2.py',472),
  ('term -> tnumexpr','term',1,'p_term_numeric','specparser2.py',478),
  ('atom -> ID','atom',1,'p_atom0','specparser2.py',485),
  ('atom -> ID LPAREN termlist RPAREN','atom',4,'p_atom','specparser2.py',489),
  ('initlist -> atom','initlist',1,'p_initlist1','specparser2.py',495),
  ('initlist -> atom COMMA initlist','initlist',3,'p_initlistN','specparser2.py',499),
  ('initlist -> atom EQ NUMBER','initlist',3,'p_initlistnum1','specparser2.py',503),
  ('initlist -> atom EQ NUMBER COMMA initlist','initlist',5,'p_initlistnumN','specparser2.py',507),
  ('effects -> effect','effects',1,'p_effect1','specparser2.py',515),
  ('effects -> effect effects','effects',2,'p_effects','specparser2.py',519),
  ('effect -> atom SEMICOLON','effect',2,'p_effectP','specparser2.py',527),
  ('effect -> NOT atom SEMICOLON','effect',3,'p_effectN','specparser2.py',531),
  ('effect -> atom ASSIGN numexpr SEMICOLON','effect',4,'p_effectA','specparser2.py',537),
  ('effect -> IF boolexpr LBRACE effects RBRACE','effect',5,'p_effectC','specparser2.py',543),
  ('effect -> FORALL LPAREN paramlist RPAREN LBRACE effects RBRACE','effect',7,'p_effectU','specparser2.py',552),
  ('paramlist -> param','paramlist',1,'p_paramlist1','specparser2.py',558),
  ('paramlist -> param COMMA paramlist','paramlist',3,'p_paramlistN','specparser2.py',562),
  ('param -> ID COLON setexpr','param',3,'p_param','specparser2.py',566),
  ('statement -> TRANSITION ID LPAREN paramlist RPAREN boolexpr LBRACE effects RBRACE','statement',9,'p_transition','specparser2.py',572),
  ('statement -> TRANSITION ID LPAREN RPAREN boolexpr LBRACE effects RBRACE','statement',8,'p_transition0','specparser2.py',579),
]
